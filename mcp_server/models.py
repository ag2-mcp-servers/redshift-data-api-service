# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T13:20:32+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, List, Optional

from pydantic import BaseModel, Field, RootModel, conint, constr


class ActiveStatementsExceededException(RootModel[Any]):
    root: Any


class BatchExecuteStatementException(RootModel[Any]):
    root: Any


class Blob(RootModel[str]):
    root: str


class Boolean(RootModel[bool]):
    root: bool


class BoxedBoolean(RootModel[bool]):
    root: bool


class BoxedDouble(RootModel[float]):
    root: float


class BoxedLong(RootModel[int]):
    root: int


class CancelStatementResponse(BaseModel):
    Status: Optional[Boolean] = None


class ClientToken(RootModel[constr(min_length=1, max_length=64)]):
    root: constr(min_length=1, max_length=64)


class DatabaseConnectionException(RootModel[Any]):
    root: Any


class ExecuteStatementException(RootModel[Any]):
    root: Any


class Integer(RootModel[int]):
    root: int


class InternalServerException(RootModel[Any]):
    root: Any


class ListStatementsLimit(RootModel[conint(ge=0, le=100)]):
    root: conint(ge=0, le=100)


class Location(RootModel[str]):
    root: str


class Long(RootModel[int]):
    root: int


class PageSize(RootModel[conint(ge=0, le=1000)]):
    root: conint(ge=0, le=1000)


class ParameterName(RootModel[constr(pattern=r'^[0-9a-zA-Z_]+$')]):
    root: constr(pattern=r'^[0-9a-zA-Z_]+$')


class ParameterValue(RootModel[constr(min_length=1)]):
    root: constr(min_length=1)


class ResourceNotFoundException(RootModel[Any]):
    root: Any


class SecretArn(RootModel[str]):
    root: str


class SqlParameter(BaseModel):
    name: ParameterName
    value: ParameterValue


class SqlParametersList(RootModel[List[SqlParameter]]):
    root: List[SqlParameter] = Field(..., min_length=1)


class StatementId(
    RootModel[constr(pattern=r'^[a-z0-9]{8}(-[a-z0-9]{4}){3}-[a-z0-9]{12}(:\d+)?$')]
):
    root: constr(pattern=r'^[a-z0-9]{8}(-[a-z0-9]{4}){3}-[a-z0-9]{12}(:\d+)?$')


class StatementNameString(RootModel[constr(min_length=0, max_length=500)]):
    root: constr(min_length=0, max_length=500)


class StatementStatusString(Enum):
    SUBMITTED = 'SUBMITTED'
    PICKED = 'PICKED'
    STARTED = 'STARTED'
    FINISHED = 'FINISHED'
    ABORTED = 'ABORTED'
    FAILED = 'FAILED'


class StatementString(RootModel[str]):
    root: str


class StatementStringList(RootModel[List[StatementString]]):
    root: List[StatementString]


class StatusString(Enum):
    SUBMITTED = 'SUBMITTED'
    PICKED = 'PICKED'
    STARTED = 'STARTED'
    FINISHED = 'FINISHED'
    ABORTED = 'ABORTED'
    FAILED = 'FAILED'
    ALL = 'ALL'


class String(RootModel[str]):
    root: str


class TableMember(BaseModel):
    name: Optional[String] = None
    schema_: Optional[String] = Field(None, alias='schema')
    type: Optional[String] = None


class Timestamp(RootModel[datetime]):
    root: datetime


class ValidationException(RootModel[Any]):
    root: Any


class WorkgroupNameString(
    RootModel[
        constr(
            pattern=r'^(([a-z0-9-]+)|(arn:(aws(-[a-z]+)*):redshift-serverless:[a-z]{2}(-gov)?-[a-z]+-\d{1}:\d{12}:workgroup/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}))$',
            min_length=3,
            max_length=128,
        )
    ]
):
    root: constr(
        pattern=r'^(([a-z0-9-]+)|(arn:(aws(-[a-z]+)*):redshift-serverless:[a-z]{2}(-gov)?-[a-z]+-\d{1}:\d{12}:workgroup/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}))$',
        min_length=3,
        max_length=128,
    )


class Bool(RootModel[bool]):
    root: bool


class XAmzTarget(Enum):
    RedshiftData_BatchExecuteStatement = 'RedshiftData.BatchExecuteStatement'


class XAmzTarget1(Enum):
    RedshiftData_CancelStatement = 'RedshiftData.CancelStatement'


class XAmzTarget2(Enum):
    RedshiftData_DescribeStatement = 'RedshiftData.DescribeStatement'


class XAmzTarget3(Enum):
    RedshiftData_DescribeTable = 'RedshiftData.DescribeTable'


class XAmzTarget4(Enum):
    RedshiftData_ExecuteStatement = 'RedshiftData.ExecuteStatement'


class XAmzTarget5(Enum):
    RedshiftData_GetStatementResult = 'RedshiftData.GetStatementResult'


class XAmzTarget6(Enum):
    RedshiftData_ListDatabases = 'RedshiftData.ListDatabases'


class XAmzTarget7(Enum):
    RedshiftData_ListSchemas = 'RedshiftData.ListSchemas'


class XAmzTarget8(Enum):
    RedshiftData_ListStatements = 'RedshiftData.ListStatements'


class XAmzTarget9(Enum):
    RedshiftData_ListTables = 'RedshiftData.ListTables'


class BatchExecuteStatementOutput(BaseModel):
    ClusterIdentifier: Optional[Location] = None
    CreatedAt: Optional[Timestamp] = None
    Database: Optional[String] = None
    DbUser: Optional[String] = None
    Id: Optional[StatementId] = None
    SecretArn_1: Optional[SecretArn] = Field(None, alias='SecretArn')
    WorkgroupName: Optional[WorkgroupNameString] = None


class CancelStatementRequest(BaseModel):
    Id: StatementId


class ColumnMetadata(BaseModel):
    columnDefault: Optional[String] = None
    isCaseSensitive: Optional[Bool] = None
    isCurrency: Optional[Bool] = None
    isSigned: Optional[Bool] = None
    label: Optional[String] = None
    length: Optional[Integer] = None
    name: Optional[String] = None
    nullable: Optional[Integer] = None
    precision: Optional[Integer] = None
    scale: Optional[Integer] = None
    schemaName: Optional[String] = None
    tableName: Optional[String] = None
    typeName: Optional[String] = None


class ColumnMetadataList(RootModel[List[ColumnMetadata]]):
    root: List[ColumnMetadata]


class DatabaseList(RootModel[List[String]]):
    root: List[String]


class DescribeStatementRequest(BaseModel):
    Id: StatementId


class DescribeTableRequest(BaseModel):
    ClusterIdentifier: Optional[Location] = None
    ConnectedDatabase: Optional[String] = None
    Database: String
    DbUser: Optional[String] = None
    MaxResults: Optional[PageSize] = None
    NextToken: Optional[String] = None
    Schema: Optional[String] = None
    SecretArn_1: Optional[SecretArn] = Field(None, alias='SecretArn')
    Table: Optional[String] = None
    WorkgroupName: Optional[WorkgroupNameString] = None


class ExecuteStatementInput(BaseModel):
    ClientToken_1: Optional[ClientToken] = Field(None, alias='ClientToken')
    ClusterIdentifier: Optional[Location] = None
    Database: String
    DbUser: Optional[String] = None
    Parameters: Optional[SqlParametersList] = None
    SecretArn_1: Optional[SecretArn] = Field(None, alias='SecretArn')
    Sql: StatementString
    StatementName: Optional[StatementNameString] = None
    WithEvent: Optional[Boolean] = None
    WorkgroupName: Optional[WorkgroupNameString] = None


class ExecuteStatementOutput(BaseModel):
    ClusterIdentifier: Optional[Location] = None
    CreatedAt: Optional[Timestamp] = None
    Database: Optional[String] = None
    DbUser: Optional[String] = None
    Id: Optional[StatementId] = None
    SecretArn_1: Optional[SecretArn] = Field(None, alias='SecretArn')
    WorkgroupName: Optional[WorkgroupNameString] = None


class FieldModel(BaseModel):
    blobValue: Optional[Blob] = None
    booleanValue: Optional[BoxedBoolean] = None
    doubleValue: Optional[BoxedDouble] = None
    isNull: Optional[BoxedBoolean] = None
    longValue: Optional[BoxedLong] = None
    stringValue: Optional[String] = None


class FieldList(RootModel[List[FieldModel]]):
    root: List[FieldModel]


class GetStatementResultRequest(BaseModel):
    Id: StatementId
    NextToken: Optional[String] = None


class ListDatabasesRequest(BaseModel):
    ClusterIdentifier: Optional[Location] = None
    Database: String
    DbUser: Optional[String] = None
    MaxResults: Optional[PageSize] = None
    NextToken: Optional[String] = None
    SecretArn_1: Optional[SecretArn] = Field(None, alias='SecretArn')
    WorkgroupName: Optional[WorkgroupNameString] = None


class ListDatabasesResponse(BaseModel):
    Databases: Optional[DatabaseList] = None
    NextToken: Optional[String] = None


class ListSchemasRequest(BaseModel):
    ClusterIdentifier: Optional[Location] = None
    ConnectedDatabase: Optional[String] = None
    Database: String
    DbUser: Optional[String] = None
    MaxResults: Optional[PageSize] = None
    NextToken: Optional[String] = None
    SchemaPattern: Optional[String] = None
    SecretArn_1: Optional[SecretArn] = Field(None, alias='SecretArn')
    WorkgroupName: Optional[WorkgroupNameString] = None


class ListStatementsRequest(BaseModel):
    MaxResults: Optional[ListStatementsLimit] = None
    NextToken: Optional[String] = None
    RoleLevel: Optional[Boolean] = None
    StatementName: Optional[StatementNameString] = None
    Status: Optional[StatusString] = None


class ListTablesRequest(BaseModel):
    ClusterIdentifier: Optional[Location] = None
    ConnectedDatabase: Optional[String] = None
    Database: String
    DbUser: Optional[String] = None
    MaxResults: Optional[PageSize] = None
    NextToken: Optional[String] = None
    SchemaPattern: Optional[String] = None
    SecretArn_1: Optional[SecretArn] = Field(None, alias='SecretArn')
    TablePattern: Optional[String] = None
    WorkgroupName: Optional[WorkgroupNameString] = None


class SchemaList(RootModel[List[String]]):
    root: List[String]


class SqlList(RootModel[List[StatementString]]):
    root: List[StatementString] = Field(..., max_length=40, min_length=1)


class SqlRecords(RootModel[List[FieldList]]):
    root: List[FieldList]


class StatementData(BaseModel):
    CreatedAt: Optional[Timestamp] = None
    Id: StatementId
    IsBatchStatement: Optional[Boolean] = None
    QueryParameters: Optional[SqlParametersList] = None
    QueryString: Optional[StatementString] = None
    QueryStrings: Optional[StatementStringList] = None
    SecretArn_1: Optional[SecretArn] = Field(None, alias='SecretArn')
    StatementName: Optional[StatementNameString] = None
    Status: Optional[StatusString] = None
    UpdatedAt: Optional[Timestamp] = None


class StatementList(RootModel[List[StatementData]]):
    root: List[StatementData]


class SubStatementData(BaseModel):
    CreatedAt: Optional[Timestamp] = None
    Duration: Optional[Long] = None
    Error: Optional[String] = None
    HasResultSet: Optional[Boolean] = None
    Id: StatementId
    QueryString: Optional[StatementString] = None
    RedshiftQueryId: Optional[Long] = None
    ResultRows: Optional[Long] = None
    ResultSize: Optional[Long] = None
    Status: Optional[StatementStatusString] = None
    UpdatedAt: Optional[Timestamp] = None


class SubStatementList(RootModel[List[SubStatementData]]):
    root: List[SubStatementData]


class TableList(RootModel[List[TableMember]]):
    root: List[TableMember]


class BatchExecuteStatementInput(BaseModel):
    ClientToken_1: Optional[ClientToken] = Field(None, alias='ClientToken')
    ClusterIdentifier: Optional[Location] = None
    Database: String
    DbUser: Optional[String] = None
    SecretArn_1: Optional[SecretArn] = Field(None, alias='SecretArn')
    Sqls: SqlList
    StatementName: Optional[StatementNameString] = None
    WithEvent: Optional[Boolean] = None
    WorkgroupName: Optional[WorkgroupNameString] = None


class ColumnList(RootModel[List[ColumnMetadata]]):
    root: List[ColumnMetadata]


class DescribeStatementResponse(BaseModel):
    ClusterIdentifier: Optional[String] = None
    CreatedAt: Optional[Timestamp] = None
    Database: Optional[String] = None
    DbUser: Optional[String] = None
    Duration: Optional[Long] = None
    Error: Optional[String] = None
    HasResultSet: Optional[Boolean] = None
    Id: StatementId
    QueryParameters: Optional[SqlParametersList] = None
    QueryString: Optional[StatementString] = None
    RedshiftPid: Optional[Long] = None
    RedshiftQueryId: Optional[Long] = None
    ResultRows: Optional[Long] = None
    ResultSize: Optional[Long] = None
    SecretArn_1: Optional[SecretArn] = Field(None, alias='SecretArn')
    Status: Optional[StatusString] = None
    SubStatements: Optional[SubStatementList] = None
    UpdatedAt: Optional[Timestamp] = None
    WorkgroupName: Optional[WorkgroupNameString] = None


class DescribeTableResponse(BaseModel):
    ColumnList_1: Optional[ColumnList] = Field(None, alias='ColumnList')
    NextToken: Optional[String] = None
    TableName: Optional[String] = None


class GetStatementResultResponse(BaseModel):
    ColumnMetadata: Optional[ColumnMetadataList] = None
    NextToken: Optional[String] = None
    Records: SqlRecords
    TotalNumRows: Optional[Long] = None


class ListSchemasResponse(BaseModel):
    NextToken: Optional[String] = None
    Schemas: Optional[SchemaList] = None


class ListStatementsResponse(BaseModel):
    NextToken: Optional[String] = None
    Statements: StatementList


class ListTablesResponse(BaseModel):
    NextToken: Optional[String] = None
    Tables: Optional[TableList] = None
